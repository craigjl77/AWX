---
  - name: "Block all Events Per Host"
    # Ansible Playbook will run on all hosts
    hosts: all
    gather_facts: no

    tasks:

    #####################################
    #  EIF Section
    #####################################    
    - name: Does EIF rules file exist
      stat:
        path: "{{rules_file_eif}}"
      register: eif_rules
      
    #- debug: var=eif_rules 

    #####################################
    #  SNMP Section
    #####################################
    - name: Does SNMP rules file exist
      stat:
        path: "{{rules_file_snmp}}"
      register: snmp_rules
      
    #- debug: var=snmp_rules  
       
    - name: "Search for check_snmp_lookup"
      # check_snmp_lookup.changed will be true if dpautomate.drop.lookup exists
      #become: yes
      #become_user: root
      #tags: example1
      replace:
        path: "{{rules_file_snmp}}"
        regexp: ".*dpautomate.drop.lookup.*"
        replace: "TestReplace"
      check_mode: yes
      register: check_snmp_lookup
      when: snmp_rules.stat.exists
      
    #- debug: var=check_snmp_lookup

    - name: Add lookup to snmprules
      # Will be skipped if heck_snmp_lookup.changed is true 
      lineinfile:
        path: "{{rules_file_snmp}}"
        backup: no
        insertbefore: '.*Leaving... snmptrap.rules.*'
        line: 'include "$NC_RULES_HOME/dpautomate.drop.lookup"'
      register: lookup_in_snmprules  
      when: (check_snmp_lookup.changed == false) and (snmp_rules.stat.exists)
      
    #- debug: var=lookup_in_snmprules
      
    - name: Add code to snmprules
      # Will be skipped if snmp_lookup.changed is true 
      lineinfile:
        path: "{{rules_file_snmp}}"
        backup: no
        insertafter: '.*dpautomate.drop.lookup.*'
        line: "{{ item }}"
      with_items:
      - ' '
      - 'if (regmatch($val,"1")) { discard }'
      - '$val = lookup(@Node, dpautomate_drop)'
      register: code_in_snmprules  
      when: (check_snmp_lookup.changed == false) and (snmp_rules.stat.exists)

    #- debug: var=code_in_snmprules

    #####################################
    #  Syslog Section
    #####################################
    - name: Does Syslog rules file exist
      stat:
        path: "{{rules_file_syslog}}"
      register: syslog_rules
      
    #- debug: var=syslog_rules

    - name: "Search for check_syslog_lookup"
      # check.changed will be true if dpautomate.drop.lookup exists
      #become: yes
      #become_user: root
      #tags: example1
      replace:
        path: "{{rules_file_syslog}}"
        regexp: ".*dpautomate.drop.lookup.*"
        replace: "TestReplace"
      check_mode: yes
      register: check_syslog_lookup
      when: syslog_rules.stat.exists
      
    #- debug: var=check_syslog_lookup

    - name: Add lookup to syslogrules
      # Will be skipped if check_syslog_lookup.changed is true 
      lineinfile:
        path: "{{rules_file_syslog}}"
        backup: no
        insertbefore: '.*Leaving... syslog.rules.*'
        line: 'include "$NC_RULES_HOME/dpautomate.drop.lookup"'
      register: lookup_in_syslogrules  
      when: (check_syslog_lookup.changed == false) and (syslog_rules.stat.exists)

    #- debug: var=lookup_in_syslogrules

    - name: Add code to syslogrules
      # Will be skipped if syslog_lookup.changed is true 
      lineinfile:
        path: "{{rules_file_syslog}}"
        backup: no
        insertafter: '.*dpautomate.drop.lookup.*'
        #Note items added need to be in the reverse order to what you need them in the file
        line: "{{ item }}"
      with_items:
      - ' '
      - 'if (regmatch($val,"1")) { discard }'
      - '$val = lookup(@Node, dpautomate_drop)'
      register: code_in_syslogrules  
      when: (check_syslog_lookup.changed == false) and (syslog_rules.stat.exists)

    #- debug: var=code_in_syslogrules

    #####################################
    #  DpAutomate lookup file Section
    #####################################       
    - name: Does lookup file exist
      stat:
        path: "{{rules_file_dpautolookup}}"
      register: lookup_file

    #- debug: var=lookup_file  
       
    - name: Create lookup file if not exists
      shell: |
        echo '## Table of hostnames where all events are dropped if set to 1' > {{ rules_file_dpautolookup }}
        echo 'table dpautomate_drop = ' >> {{ rules_file_dpautolookup }}
        echo '{' >> {{ rules_file_dpautolookup }}
        echo '        {"DummyHost1","1"},' >> {{ rules_file_dpautolookup }}
        echo '        {"DummyHost2","1"}' >> {{ rules_file_dpautolookup }}
        echo '}' >> {{ rules_file_dpautolookup }}
        echo 'default = {"0"}' >> {{ rules_file_dpautolookup }}
      when:  not lookup_file.stat.exists

    - name: Change file ownership, group and permissions
      ansible.builtin.file:
        path: "{{rules_file_dpautolookup}}"
        owner: netcool
        group: ncoadmin
        mode: '0644'
      when:  not lookup_file.stat.exists
      
    - name: Split comma-separated fact into a list
      set_fact:
        hosts_to_add_list: "{{ JShostname.split(',') }}"

    - debug: var=my_list 
    
    - name: Check if each item in the list exists in the file
      replace:
        path: "{{rules_file_dpautolookup}}"
        regexp: ".*{{ item }}.*"
        replace: "TestReplace"
      check_mode: yes
      register: check_hostname
      with_items: "{{ hosts_to_add_list }}"
      when: hosts_to_add_list

    - debug: var=check_hostname

    - name: Add items to the file if they don't exist
      lineinfile:
        insertafter: '.*\{"DummyHost1","1"\}'
        line: '        {"{{ item }}","1"},'
        dest: "{{ rules_file_dpautolookup }}"
        state: present
      register: add_lines
      with_items: "{{ hosts_to_add_list }}"
      # only run this task when the list is not empty
      when: hosts_to_add_list and not check_hostname.results | map(attribute='changed') | list
      

    - debug: var=add_lines

    #####################################
    #  Probe restart Section
    #####################################              
    - name: Restart Mttrapd Probe
      # Will be skipped if check_hostname.changed is false
      shell: |
        {{omnibin}}/nco_pa_stop -process Mttrapd -password {{netcooluserpw}}
        sleep 1
        {{omnibin}}/nco_pa_start -process Mttrapd -password {{netcooluserpw}}

      when: (my_list) and (snmp_rules.stat.exists)
      
    - name: "Hostname is already present"
      # Will run if check.changed is true
      debug: msg="Hostname {{JShostname}} is alredy present"
      when: check_hostname.changed == true
      
    # The Output of the above task will be displayed on the Screen
    #- debug: var=output.stdout_lines
